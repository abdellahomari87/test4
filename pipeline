pipeline {
    agent any

    tools {
        maven 'gg'
    }

    environment {
        DOCKER_CREDENTIALS_ID = 'dockerhub credentials'
        DOCKER_IMAGE_NAME = 'omari87/test4'
        WAR_FILE_NAME = 'ABCtechnologies-1.0.war'
    }

    stages {
        stage('Checkout') {
            steps {
                git credentialsId: 'git-credentials', url: 'https://github.com/abdellahomari87/test4.git', branch: 'master'
            }
        }

        stage('Build') {
            steps {
                sh 'mvn clean package'
            }
        }

        stage('Archive') {
            steps {
                archiveArtifacts artifacts: "target/${WAR_FILE_NAME}", allowEmptyArchive: true
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    sh '''
                    echo "FROM tomcat:latest" > Dockerfile
                    echo "COPY target/${WAR_FILE_NAME} /usr/local/tomcat/webapps/" >> Dockerfile
                    sudo docker build -t ${DOCKER_IMAGE_NAME} .
                    '''
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    sh '''
                    echo $DOCKERHUB_PASSWORD | sudo docker login -u $DOCKERHUB_USERNAME --password-stdin
                    sudo docker push ${DOCKER_IMAGE_NAME}
                    '''
                }
            }
        }

        stage('Deploy Docker Container') {
            steps {
                script {
                    def containerExists = sh(script: 'sudo docker ps -a | grep tomcat', returnStatus: true) == 0
                    if (containerExists) {
                        sh 'sudo docker rm -f tomcat'
                    }
                    sh 'sudo docker run -d -p 8081:8080 --name tomcat ${DOCKER_IMAGE_NAME}'
                }
            }
        }
    }
}
